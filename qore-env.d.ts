// [WARNING] This file is generated by running `$ qore codegen` on your root project, please do not edit

/// <reference types="@feedloop/qore-client" />
import { QoreSchema } from "@feedloop/qore-client";

declare module "@feedloop/qore-client" {
  type MemberTableRow = {
    id: string;
    email: string;
    role: { id: string; displayField: string };
    password: string;
    messages1: { nodes: Messages1TableRow[] };
    channels: { nodes: ChannelsTableRow[] };
    memberLastRead: { nodes: MemberLastReadTableRow[] };
  };

  type ChannelTableRow = {
    id: string;
    name: string;
    messages: { nodes: MessagesTableRow[] };
    member1: { nodes: Member1TableRow[] };
    type: "channel" | "private";
    hasCurrentUser: number;
  };

  type MessagesTableRow = {
    id: string;
    message: string;
    attachment: string;
    channel: ChannelTableRow;
    from: FromTableRow;
    createdAt: Date;
  };

  type MemberLastReadTableRow = {
    id: string;
    member: MemberTableRow;
    lastReadAt: Date;
  };

  type MessagesDefaultViewViewRow = {
    read: {
      id: string;
      message: string;
      attachment: string;
      channel: ChannelTableRow;
      from: FromTableRow;
      createdAt: Date;
    };
    write: {
      message: string;
      attachment: string;
      channel: string[];
      from: string[];
      createdAt: Date;
    };
    params: {};
    actions: {};
  };

  type CurrentMemberViewRow = {
    read: {
      id: string;
      email: string;
      role: { id: string; displayField: string };
      password: string;
      messages1: { nodes: Messages1TableRow[] };
      channels: { nodes: ChannelsTableRow[] };
    };
    write: {
      email: string;
      password: string;
      messages1: string[];
      channels: string[];
    };
    params: {};
    actions: {};
  };

  type MemberLastReadDefaultViewViewRow = {
    read: {
      id: string;
      member: MemberTableRow;
      lastReadAt: Date;
    };
    write: {
      member: string[];
      lastReadAt: Date;
    };
    params: {};
    actions: {};
  };

  type ChannelDefaultViewViewRow = {
    read: {
      id: string;
      name: string;
      messages: { nodes: MessagesTableRow[] };
      member1: { nodes: Member1TableRow[] };
      type: "channel" | "private";
      hasCurrentUser: number;
    };
    write: {
      name: string;
      messages: string[];
      member1: string[];
      type: "channel" | "private";
    };
    params: {
      search?: string;
    };
    actions: {
      sendMessage: {
        message?: string;
        attachment?: string;
      };
      join: {};
    };
  };

  type CurrentMemberLastReadViewRow = {
    read: {
      id: string;
      member: MemberTableRow;
      lastReadAt: Date;
    };
    write: {
      member: string[];
      lastReadAt: Date;
    };
    params: {};
    actions: {};
  };

  type PublicMembersViewRow = {
    read: {
      id: string;
      email: string;
      role: { id: string; displayField: string };
      password: string;
      messages1: { nodes: Messages1TableRow[] };
      channels: { nodes: ChannelsTableRow[] };
      memberLastRead: { nodes: MemberLastReadTableRow[] };
    };
    write: {
      email: string;
      password: string;
      messages1: string[];
      channels: string[];
      memberLastRead: string[];
    };
    params: {
      search?: string;
    };
    actions: {};
  };

  type JoinedChannelsViewRow = {
    read: {
      id: string;
      name: string;
      messages: { nodes: MessagesTableRow[] };
      member1: { nodes: Member1TableRow[] };
      type: "channel" | "private";
      hasCurrentUser: number;
    };
    write: {
      name: string;
      messages: string[];
      member1: string[];
      type: "channel" | "private";
    };
    params: {
      search?: string;
    };
    actions: {
      sendMessage: {
        message?: string;
        attachment?: string;
      };
    };
  };

  type MemberDefaultViewViewRow = {
    read: {
      id: string;
      email: string;
      role: { id: string; displayField: string };
      password: string;
      messages1: { nodes: Messages1TableRow[] };
      channels: { nodes: ChannelsTableRow[] };
    };
    write: {
      email: string;
      password: string;
      messages1: string[];
      channels: string[];
    };
    params: {
      search?: string;
    };
    actions: {};
  };

  type ChannelMessagesViewRow = {
    read: {
      id: string;
      message: string;
      attachment: string;
      channel: ChannelTableRow;
      from: FromTableRow;
      createdAt: Date;
    };
    write: {
      message: string;
      attachment: string;
      channel: string[];
      from: string[];
      createdAt: Date;
    };
    params: {
      channelID: string;
      after?: string;
      "$by.createdAt"?: "desc";
    };
    actions: {};
  };

  type PrivateChannelsViewRow = {
    read: {
      id: string;
      name: string;
      messages: { nodes: MessagesTableRow[] };
      member1: { nodes: Member1TableRow[] };
      type: "channel" | "private";
      hasCurrentUser: number;
    };
    write: {
      name: string;
      messages: string[];
      member1: string[];
      type: "channel" | "private";
    };
    params: {
      search?: string;
    };
    actions: {
      sendMessage: {
        message?: string;
        attachment?: string;
      };
    };
  };

  type ProjectSchema = {
    messagesDefaultView: MessagesDefaultViewViewRow;
    currentMember: CurrentMemberViewRow;
    memberLastReadDefaultView: MemberLastReadDefaultViewViewRow;
    channelDefaultView: ChannelDefaultViewViewRow;
    currentMemberLastRead: CurrentMemberLastReadViewRow;
    publicMembers: PublicMembersViewRow;
    joinedChannels: JoinedChannelsViewRow;
    memberDefaultView: MemberDefaultViewViewRow;
    channelMessages: ChannelMessagesViewRow;
    privateChannels: PrivateChannelsViewRow;
  };
}
